name: Expo actions
on:
  push:
    branches:
      - main
jobs:
  ValidateActor:
    runs-on: ubuntu-latest
    outputs:
      ACTOR: ${{ steps.actor.outputs.ACTOR }}
    steps:
      - id: actor
        run: |
          if [[ ${{ github.actor }} != *"[bot]" ]];then
              echo "::set-output name=ACTOR::true" 
          else
              echo "::set-output name=ACTOR::false" 
          fi
  Publish_Updates:
    name: Install and publish
    # if: ${{needs.ValidateActor.outputs.ACTOR}} == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          eas-cache: true
          token: ${{ secrets.EXPO_TOKEN }}
      - run: npm install
        name: Install dependencies
      - run: eas update --channel=production --message "${{ github.event.head_commit.message }}"
  GenerateNewBuild:
    name: Build new artifact
    runs-on: ubuntu-latest
    needs: Publish_Updates
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          eas-cache: true
          token: ${{ secrets.EXPO_TOKEN }}
      - run: npm install
      - run: eas build -p android --profile production
  #     - name: Upload result for building job
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build_status
  #         path: ./build_status.txt
  # DownloadFile:
  #   needs: GenerateNewBuild
  #   name: Download generated artifact
  #   if: "contains(github.event.head_commit.message, '[Release]')" # If commit message contains "[Released]" only then this job would be run.
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Prepare environment
  #       uses: actions/checkout@v3
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Download result for building job
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build_status
  #     - name: Get app name
  #       id: getappname
  #       shell: bash
  #       run: echo "name=$(cat ./app.json | jq ".expo.name" | sed "s/\"//gi")" >> $GITHUB_ENV
  #     - name: Get app version
  #       id: get-app-version
  #       shell: bash
  #       run: echo "version=$(cat ./app.json | jq ".expo.version" | sed "s/\"//gi")" >> $GITHUB_ENV
  #     - name: Get artifact url
  #       shell: bash
  #       run: |
  #         artifact_url=`cat ./build_status.txt`
  #         echo "artifact_url=$artifact_url" >> $GITHUB_ENV
  #     - name: Download artifact
  #       id: downloadfile # Remember to give an ID if you need the output filename
  #       run: |
  #         wget -c ${{ env.artifact_url }} -O ./${{ env.name }}.apk
  #     - name: "Echo download path"
  #       run: echo "apk_file=./${{ env.name }}.apk" >> $GITHUB_ENV
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN:: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: "v${{ env.version }}"
  #         release_name: "${{ env.name }}: release ${{ env.version }}"
  #         draft: false
  #     - name: Upload Release Asset
  #       id: upload-release-asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN:: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
  #         asset_path: ${{ env.apk_file }}
  #         asset_name: ./${{ env.name }}.apk
  #         asset_content_type: application/apk
